openapi: 3.0.3
info:
  version: 1.0.0
  title: Ingredient management
  description: |-
    API related to management of Ingredients.
paths:
  /ingredients:
    get:
      tags:
        - Ingredient
      summary: Get page of Ingredients.
      operationId: getIngredientsPage
      description: |-
        Returns a page of Ingredients according to filtering and sorting criteria.
        Only Restaurant Administrator can search for Ingredients.
      parameters:
        # sorting
        - name: sort
          schema:
            type: string
            default: +name
            maxLength: 50
          required: false
          in: query
          description: |-
            Specifies single attribute used for sorting. Value of the attribute is prefixed by "-" for descending order
            or with "+" for ascending order. Possible values for parameter are:
            name, price, calories and producer. Default is ascending order.
          examples:
            asc_name:
              value: +name
              summary: Sorts by Name in ascending order.
            desc_address:
              value: -price
              summary: Sorts by Price in descending order.
        # pagination
        - name: limit
          schema:
            type: integer
            format: int32
            default: 10
            minimum: 1
          required: false
          example: 25
          in: query
          description: |-
            Specifies maximum number of items returned - the size of page of Ingredients. Maximum value is 50.
            Values higher than 50 wil be automatically truncated to 50.
        - name: offset
          schema:
            type: integer
            format: int64
            default: 1
            minimum: 1
          required: false
          example: 3
          in: query
          description: Specifies a page number.
        # filtering
        - name: name
          schema:
            type: string
            maxLength: 50
          required: false
          description: Provides case-insensitive fulltext search by Name.
          in: query
          examples:
            partial_substring:
              value: oli
              summary: Substring used for filtering by Name.
            full_string:
              value: olive
              summary: Exact match used for filtering by Name.
        - name: producer
          schema:
            type: string
            maxLength: 50
          required: false
          description: Provides case-insensitive fulltext search by Producer.
          in: query
          examples:
            partial_substring:
              value: goo
              summary: Substring used for filtering by Producer.
            full_string:
              value: good farm
              summary: Exact match used for filtering by Producer.
      responses:
        '200':
          description: Page of Ingredients successfully fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientsPage'
        '400':
          description: Requests parameters are invalid.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '403':
          description: User is not Restaurant Admin.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
    post:
      tags:
        - Ingredient
      summary: Creates an Ingredient.
      operationId: createIngredient
      description: |-
        Creates an Ingredient.
        Only Restaurant Administrator can create an Ingredient.
      requestBody:
        description: Request body contains information related to new Ingredient.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientCreation'
      responses:
        '201':
          description: Ingredient successfully created.
        '400':
          description: Requests body is invalid.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '403':
          description: User is not Restaurant Admin.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '404':
          description: Producer not found.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
  /ingredients/{ingredientId}:
    get:
      tags:
        - Ingredient
      summary: Get Ingredient by Id.
      operationId: getIngredient
      description: |-
        Returns details of an Ingredient.
        Only Restaurant Administrator can get details of an Ingredient.
      parameters:
        - name: ingredientId
          schema:
            type: integer
            format: int64
          required: true
          description: Id of searched Ingredient.
          in: path
          example: 100
      responses:
        '200':
          description: Ingredient details successfully fetched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientDetails'
        '400':
          description: Requests parameters are invalid.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '403':
          description: User is not Restaurant Admin.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '404':
          description: Ingredient not found.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
    put:
      tags:
        - Ingredient
      summary: Updates an Ingredient.
      operationId: updateIngredient
      description: |-
        Updates an Ingredient.
        Only Restaurant Administrator can update an Ingredient.
      parameters:
        - name: ingredientId
          schema:
            type: integer
            format: int64
          required: true
          description: Id of updated Ingredient.
          in: path
          example: 100
      requestBody:
        description: Request body contains information related to updated Ingredient.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientUpdate'
      responses:
        '200':
          description: Ingredient successfully updated.
        '400':
          description: Requests body is invalid.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '403':
          description: User is not Restaurant Admin.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '404':
          description: Ingredient or Producer not found.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
    delete:
      tags:
        - Ingredient
      summary: Deletes an Ingredient.
      operationId: deleteIngredient
      description: |-
        Deletes an Ingredient.
        Only Restaurant Administrator can delete an Ingredient.
      parameters:
        - name: ingredientId
          schema:
            type: integer
            format: int64
          required: true
          description: Id of updated Ingredient.
          in: path
          example: 100
      responses:
        '200':
          description: Ingredient successfully deleted.
        '403':
          description: User is not Restaurant Admin or Ingredient has dependencies.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
        '404':
          description: Ingredient not found.
          content:
            application/json:
              schema:
                $ref: 'common.yaml#/components/schemas/GenericApplicationError'
components:
  schemas:
    IngredientsPage:
      type: object
      properties:
        pagination:
          $ref: 'common.yaml#/components/schemas/Pagination'
        items:
          type: array
          description: List of fetched Ingredients.
          items:
            $ref: '#/components/schemas/IngredientPageElementDetails'
    IngredientPageElementDetails:
      type: object
      properties:
        id:
          description: ID of the Ingredient.
          type: integer
          format: int64
          example: 120
        name:
          description: Name of the Ingredient.
          type: string
          example: Salmon
        price:
          description: Price of the Ingredient per 100 grams.
          type: number
          format: double
          example: 3.99
        calories:
          description: Calories of the Ingredient per 100 grams.
          type: number
          format: double
          example: 300
        producer:
          description: Name of the Ingredient's Producer.
          type: string
          example: Good Farm
    IngredientCreation:
      type: object
      required:
        - name
        - price
        - calories
        - producerId
      properties:
        name:
          description: Name of the Ingredient.
          type: string
          example: Salmon
        price:
          description: Price of the Ingredient per 100 grams.
          type: number
          format: double
          example: 3.99
        calories:
          description: Calories of the Ingredient per 100 grams.
          type: number
          format: double
          example: 300
        producerId:
          description: Id of the Ingredient's Producer.
          type: integer
          format: int64
          example: 120
    IngredientDetails:
      type: object
      properties:
        id:
          description: ID of the Ingredient.
          type: integer
          format: int64
          example: 120
        name:
          description: Name of the Ingredient.
          type: string
          example: Salmon
        price:
          description: Price of the Ingredient per 100 grams.
          type: number
          format: double
          example: 3.99
        calories:
          description: Calories of the Ingredient per 100 grams.
          type: number
          format: double
          example: 300
        producerId:
          description: Id of the Ingredient's Producer.
          type: integer
          format: int64
          example: 120
        producerName:
          description: Name of the Ingredient's Producer.
          type: string
          example: Good Farm
    IngredientUpdate:
      type: object
      required:
        - name
        - price
        - calories
        - producerId
      properties:
        name:
          description: Name of the Ingredient.
          type: string
          example: Salmon
        price:
          description: Price of the Ingredient per 100 grams.
          type: number
          format: double
          example: 3.99
        calories:
          description: Calories of the Ingredient per 100 grams.
          type: number
          format: double
          example: 300
        producerId:
          description: Id of the Ingredient's Producer.
          type: integer
          format: int64
          example: 120
